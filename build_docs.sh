#!/bin/bash
# This shell script builds the docs for msiempy 
# I've been running it from MacOS but I beleive it's valid on Linux too. 

# It will automatically generate pydoctor documentation.
# It also adds git reference and tag info

# Install python requirements
# python3 setup.py install
# python3 -m pip install -r requirements.txt
# sudo apt-get install graphviz || sudo yum install graphviz || brew install graphviz

# Usage ./build_docs -o "./mfesiem.github.io/docs/test/msiempy"

# Stop if errors
set -euo pipefail

IFS=$'\n\t,'

usage(){
    echo "[USAGE] $0 [-h] [-o <path>]" 1>&2
    echo
    echo -e "This shell script builds the docs for msiempy. \nGenerated by PyDoctor."
    echo 
    echo -e "If the current git HEAD is :"
    echo -e "   - Not a tag: will write to './apidocs/dev'"
    echo -e "   - A tag: will write to './apidocs/<version>' \n\tand copy everything to './apidocs/'"
    echo
    echo -e "\t-h\tPrint this help message."
    echo -e "\t-o\t<path>\tStorage location. At the end of the build, copy everything from './apidocs/*' to \n\t\tthe storage folder. (synchronized with the gh-pages repository in the workflows) "
    exit -1
}

output=""

while getopts ":ho:" arg; do
    case "${arg}" in
        h) #Print help
            usage
            ;;

        o)
            # The out folder # This should be sychronized with alternative storage.  
            output=${OPTARG}
            mkdir -p "${output}"
            ;;

        *)
            echo "[ERROR] Syntax mistake calling the script."
            usage
            exit
            ;;
    esac
done 

# Figure the project version
project_version="$(python3 setup.py -V)"

# Figure commit ref
git_sha="$(git rev-parse HEAD)"
if ! git describe --exact-match --tags; then
    echo "Not a tagged version."
    is_tag=false
else
    git_sha="$(git describe --exact-match --tags)"
    echo "Tag: ${git_sha}."
    is_tag=true
fi

# Folder i.e. ./apidocs/0.3.5/
if [[ ${is_tag} = true ]]; then
    docs_folder="./apidocs/${project_version}"
else
    docs_folder="./apidocs/dev"
    project_version="(dev)"
fi

# Init output folder - not storage
rm -rf "./apidocs"
mkdir -p "${docs_folder}"

#Figure out branch
branch=$(git rev-parse --abbrev-ref HEAD)

# Include readme
readme=$(cat ./README.md)

# Generate diagrams under the ./apidocs/version folder
pyreverse -s 1 -f PUB_ONLY -o png -m y msiempy
mv ./classes.png "${docs_folder}"
mv ./packages.png "${docs_folder}"

# Generate list of requests
python3 ./samples/list_request_args.py > "./all_request_args.rst"

# Run pydoctor build
pydoctor \
    --project-name="msiempy ${project_version}" \
    --html-viewsource-base="https://github.com/mfesiem/msiempy/tree/${git_sha}" \
    --make-html \
    --quiet \
    --project-base-dir="$(pwd)" \
    --docformat=restructuredtext \
    --intersphinx=https://docs.python.org/3/objects.inv \
    --html-output="${docs_folder}" \
    ./msiempy || true

# Copy the docs from the sub folder to the root folder 
if [[ ${is_tag} = true ]] ; then
    cp -r ${docs_folder}/* "./apidocs"
fi

# Copy the docs to the storage location
if [[ -n "${output}" ]]; then
    cp -r ./apidocs/* "${output}"
    echo "[INFO] Site content copied to: ${output}"
fi
