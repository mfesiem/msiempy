name: test-and-publish
on: 
  push:
    branches: 
      - master
jobs: 
  deploy:
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }} 

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.6','3.7','3.8','3.9']
      max-parallel: 1
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt
          python -m pip install .
          python -m pip show msiempy

      - name: Setup msiempy config
        run: python ./samples/msiempy_setup.py --set esm host ${{ secrets.esmhost }} --set esm user NGCP --set esm passwd ${{ secrets.esmpass }} --set general timeout 60
      
      - name: Run tests
        run: python -m pytest --cov=./ --cov-report=xml --reruns 1 --reruns-delay 1
      
      - name: Upload code coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          name: msiempy-code-coverage
          yml: ./codecov.yml 
          fail_ci_if_error: true

      - name: Update list of NitroSession.request() arguments before documenting
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python ./samples/list_request_args.py > ./static/all_request_args.rst

      - name: Generate documentation
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        run: |

          git clone https://github.com/mfesiem/mfesiem.github.io
          rm -rf ./mfesiem.github.io/docs/msiempy
          mkdir ./mfesiem.github.io/docs/msiempy
          
          set +e

          pydoctor \
            --add-module=msiempy \
            --project-name=msiempy \
            --html-viewsource-base https://github.com/mfesiem/msiempy/blob/master/ \
            --make-html \
            --project-base-dir "$(pwd)" \
            -v --docformat=restructuredtext

          cp ./apidocs/* mfesiem.github.io/docs/msiempy/

      - name: Generate diagrams
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        run: |
          sudo apt-get install graphviz
          pyreverse -s 1 -f PUB_ONLY -o png -m y msiempy
          mv ./classes.png ./mfesiem.github.io/docs/test/msiempy
          mv ./packages.png ./mfesiem.github.io/docs/test/msiempy

      - name: Publish documentation to mfesiem.github.io/docs/msiempy
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.MFESIEM_GITHUB_IO_PRIVATE_KEY }}
          external_repository: mfesiem/mfesiem.github.io
          publish_dir: mfesiem.github.io
          publish_branch: 'master'
          user_name: 'Github Actions'
          user_email: "actions@github.com"
          commit_message: "Generate documentation - master"
          enable_jekyll: true

      - name: Build msiempy
        run: python3 setup.py --quiet build check sdist bdist_wheel

      - name: Publish msiempy to PyPI
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
      
      - name: Tag version
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          version="$(python setup.py --version)"
          last_tag="$(git --no-pager tag -l | tail -1)"
          echo "msiempy ${version}" > ./tmp_tag.txt
          git --no-pager log ${last_tag}.. --pretty=oneline >> ./tmp_tag.txt
          git config --global user.email "actions@github.com"
          git config --global user.name "Github actions"
          git tag -a ${version} -F ./tmp_tag.txt
          git push --tags
